// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

// Teamid should be integer
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  teamId    Int      @unique
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  League    League?
  Player    Player?
}

// Rules

model Rule {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  League_Rule League_Rule[]
}

// Leagues

model League {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  creator     User          @relation(fields: [creatorId], references: [id])
  creatorId   String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  League_Rule League_Rule[]
  Player      Player[]
}

//League_Rules

model League_Rule {
  id        Int      @id @default(autoincrement())
  league    League   @relation(fields: [leagueId], references: [id])
  leagueId  Int
  rule      Rule     @relation(fields: [ruleId], references: [id])
  ruleId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Players

model Player {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  league    League   @relation(fields: [leagueId], references: [id])
  leagueId  Int
  status    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Payments

// Weeks

// Table
